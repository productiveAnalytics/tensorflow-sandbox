# -*- coding: utf-8 -*-
"""Exercise1-Answer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/lmoroney/dlaicourse/blob/master/Exercises/Exercise%202%20-%20Handwriting%20Recognition/Exercise2-Answer.ipynb
"""

import random
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('acc')>0.99):
      print("\nReached 99% accuracy so cancelling training!")
      self.model.stop_training = True

mnist = tf.keras.datasets.mnist

# load train and test data set : (image, digit)
(img_train, dig_train),(img_test, dig_test) = mnist.load_data()

# Normalize
img_train, img_test = img_train / 255.0, img_test / 255.0

callbacks = myCallback()

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(512, activation=tf.nn.relu),
  tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(img_train, dig_train, epochs=10, callbacks=[callbacks])

# Test model
model.evaluate(img_test, dig_test)

digit_classification = model.predict(img_test)

idx = random.randint(0, len(img_test))

# Expected result
expected_digit = dig_test[idx]
print('Actual Digit =', expected_digit)
print('Actual Image...')
plt.imshow(img_test[idx])

# ML recognized actual result
actual_digit_classification_arr = digit_classification[idx]
print('Recongized Classification : ', actual_digit_classification_arr)
np_cls_arr = np.array(actual_digit_classification_arr)
# Find the index of max probability i.e. the recognized digit
# np.unravel_index() IS MAGICAL METHOD FROM NumPy!!!
# Being only 1-d array, the max idex is single digit
digit_index = np.unravel_index(np_cls_arr.argmax(), np_cls_arr.shape)
actual_digit = digit_index
# Find the probability of recongnized digit. IDEALLY, it should be close to one
actual_digit_prob = np_cls_arr[digit_index]
print('Probability of recongnized digit (should be ~1): ', actual_digit_prob)
print('Recongized Digit =', actual_digit)

if (expected_digit == actual_digit):
  print('SUCCESS :-)')
else:
  print('Failure :-(')