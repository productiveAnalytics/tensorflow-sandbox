# -*- coding: utf-8 -*-
"""Exercise 3 - Question.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/lmoroney/dlaicourse/blob/master/Exercises/Exercise%203%20-%20Convolutions/Exercise%203%20-%20Question.ipynb

## Exercise 3
In the videos you looked at how you would improve Fashion MNIST using Convolutions. For your exercise see if you can improve MNIST to 99.8% accuracy or more using only a single convolutional layer and a single MaxPooling 2D. You should stop training once the accuracy goes above this amount. It should happen in less than 20 epochs, so it's ok to hard code the number of epochs for training, but your training must end once it hits the above metric. If it doesn't, then you'll need to redesign your layers.

I've started the code for you -- you need to finish it!

When 99.8% accuracy has been hit, you should print out the string "Reached 99.8% accuracy so cancelling training!"
"""

import random
import matplotlib.pyplot as plt
import tensorflow as tf

# YOUR CODE STARTS HERE
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('acc') >= 0.995):
      print('\nReached 99.5% accuracy so cancelling training!\n')
      self.model.stop_training = True
# YOUR CODE ENDS HERE

### load digit MNIST dataset
mnist = tf.keras.datasets.mnist
(training_images, training_labels), (test_images, test_labels) = mnist.load_data()

# YOUR CODE STARTS HERE
train_set_size = len(training_images)
print('Training set size: ', train_set_size)
test_set_size = len(test_images)
print('Testing  set size: ', test_set_size)

### flag
use_convoluation = True

if (use_convoluation):
  print('Using Convolutional Neural Network...')
  conv_train_digits = training_images.reshape(train_set_size, 28, 28, 1)
  conv_test_digits = test_images.reshape(test_set_size, 28, 28, 1)
else:
  print('Using non-Convolutional Neural Network...')
  conv_train_digits = training_images ### Use this when not using Convolution
  conv_test_digits = test_images ### Use this when not using Convolution

### Normalize
conv_train_digits = conv_train_digits / 255.0
conv_test_digits  = conv_test_digits / 255.0
# YOUR CODE ENDS HERE

if (use_convoluation):
  model = tf.keras.models.Sequential([
    # YOUR CODE STARTS HERE
    ### layers for Convolution (32 of 3x3) + Pooling (2x2)
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    tf.keras.layers.MaxPooling2D(2,2),
    ### regular keras layer
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation=tf.nn.relu),
    tf.keras.layers.Dense(10, activation=tf.nn.softmax)
    # YOUR CODE ENDS HERE
  ])
else:
  model = tf.keras.models.Sequential([
    # YOUR CODE STARTS HERE
    ### regular keras layer
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
    # YOUR CODE ENDS HERE
  ])

# YOUR CODE STARTS HERE
callback = myCallback()
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(conv_train_digits, training_labels, epochs=20 ,callbacks=[callback])
model.summary()

test_loss, test_acc = model.evaluate(conv_test_digits, test_labels)
print('loss : ', test_loss)
print('acc  : ', test_acc)

classifications = model.predict(conv_test_digits)

idx = random.randint(0, test_set_size)

print('Sampling test image #', idx)
print('Recongnized probablitiy :', classifications[idx])
print('Actual digit :', test_labels[idx])
print('Actual image :')
plt.imshow(test_images[idx])
# YOUR CODE ENDS HERE